/** This class contains functions which extend the basic Math class. */
class MathExt {
    static Array sinValues;
    static Array cosValues;

    // Initialize the MathExt library.
    function void init() {
        // Precompute the sin and cos values
        // x   rads    sin(x)  cos(x)
        // 0   0.00    0.00    1.00
        // 10  0.17    0.17    0.98
        // 20  0.35    0.34    0.94
        // 30  0.52    0.50    0.87
        // 40  0.70    0.64    0.77
        // 50  0.87    0.77    0.64
        // 60  1.05    0.87    0.50
        // 70  1.22    0.94    0.34
        // 80  1.40    0.98    0.17
        // 90  1.57    1.00    0.00
        let sinValues = Array.new(10);
        let sinValues[0] = Fraction.new(  0, 100);
        let sinValues[1] = Fraction.new( 17, 100);
        let sinValues[2] = Fraction.new( 34, 100);
        let sinValues[3] = Fraction.new( 50, 100);
        let sinValues[4] = Fraction.new( 64, 100);
        let sinValues[5] = Fraction.new( 77, 100);
        let sinValues[6] = Fraction.new( 87, 100);
        let sinValues[7] = Fraction.new( 94, 100);
        let sinValues[8] = Fraction.new( 98, 100);
        let sinValues[9] = Fraction.new(100, 100);

        let cosValues = Array.new(10);
        let cosValues[0] = Fraction.new(100, 100);
        let cosValues[1] = Fraction.new( 98, 100);
        let cosValues[2] = Fraction.new( 94, 100);
        let cosValues[3] = Fraction.new( 87, 100);
        let cosValues[4] = Fraction.new( 77, 100);
        let cosValues[5] = Fraction.new( 64, 100);
        let cosValues[6] = Fraction.new( 50, 100);
        let cosValues[7] = Fraction.new( 34, 100);
        let cosValues[8] = Fraction.new( 17, 100);
        let cosValues[9] = Fraction.new(  0, 100);

        return;
    }

    /** Computes the greatest common divisor of the given integers. */
    function int gcd(int a, int b) {
       var int r;
       while (~(b = 0)) {             // applies Euclid's algorithm
          let r = a - (b * (a / b));  // r = remainder of the integer division a/b
          let a = b; let b = r;
       }
       return a;
    }

    /** Returns an approximation of sin(x), where x is a multiple of 10 degrees,
      * as a Fraction. */
    function Fraction sin(int x) {
        var Fraction lookup, retVal;
        var boolean negate;
        let negate = false;

        // Get x into the range [-90, -90]. sin(x) = -sin(x+-180)
        while ( x > 90 ) {
            let x = x - 180;
            let negate = ~negate;
        }
        while ( x < -90 ) {
            let x = x + 180;
            let negate = ~negate;
        }

        // Now, get x into the range [0, 90]. sin(x) = -sin(-x) for x in [-90, 0]
        if ( x < 0 ) {
            let x = -x;
            let negate = ~negate;
        }

        // Now, x is in [0, 90]. Divide by 10 and round to nearest integer.
        let x = (x + 5) / 10;

        // Look up the value, negate if necesary, and copy to a new Fraction
        let lookup = sinValues[x];
        if (negate) {
            let retVal = lookup.neg();          // neg() automatically copies
        }
        else {
            let retVal = lookup.copy();
        }

        // Return the value
        return retVal;
    }

    /** Returns an approximation of cos(x), where x is a multiple of 10 degrees,
      * as a Fraction. */
    function Fraction cos(int x) {
        var Fraction lookup, retVal;
        var boolean negate;
        let negate = false;

        // Get x into the range [0, 180]. cos(x) = -cos(x+-180)
        while ( x > 180 ) {
            let x = x - 180;
            let negate = ~negate;
        }
        while ( x < 0 ) {
            let x = x + 180;
            let negate = ~negate;
        }

        // Now, get x into the range [0, 90]. cos(x) = -cos(180-x) for x in [0, 180]
        if ( x > 90 ) {
            let x = 180-x;
            let negate = ~negate;
        }

        // Now, x is in [0, 90]. Divide by 10 and round to nearest integer.
        let x = (x + 5) / 10;

        // Look up the value, negate if necesary, and copy to a new Fraction
        let lookup = cosValues[x];
        if (negate) {
            let retVal = lookup.neg();          // neg() automatically copies
        }
        else {
            let retVal = lookup.copy();
        }

        // Return the value
        return retVal;
    }
}
